// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-gray-right-name: 'arrow-gray-right';
$arrow-gray-right-x: 80px;
$arrow-gray-right-y: 77px;
$arrow-gray-right-offset-x: -80px;
$arrow-gray-right-offset-y: -77px;
$arrow-gray-right-width: 18px;
$arrow-gray-right-height: 34px;
$arrow-gray-right-total-width: 156px;
$arrow-gray-right-total-height: 133px;
$arrow-gray-right-image: '/assets/template/css/sprites/sprite_custom.png';
$arrow-gray-right: (80px, 77px, -80px, -77px, 18px, 34px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'arrow-gray-right', );
$arrow-gray-name: 'arrow-gray';
$arrow-gray-x: 98px;
$arrow-gray-y: 77px;
$arrow-gray-offset-x: -98px;
$arrow-gray-offset-y: -77px;
$arrow-gray-width: 18px;
$arrow-gray-height: 34px;
$arrow-gray-total-width: 156px;
$arrow-gray-total-height: 133px;
$arrow-gray-image: '/assets/template/css/sprites/sprite_custom.png';
$arrow-gray: (98px, 77px, -98px, -77px, 18px, 34px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'arrow-gray', );
$expo-small-name: 'expo-small';
$expo-small-x: 76px;
$expo-small-y: 59px;
$expo-small-offset-x: -76px;
$expo-small-offset-y: -59px;
$expo-small-width: 22px;
$expo-small-height: 16px;
$expo-small-total-width: 156px;
$expo-small-total-height: 133px;
$expo-small-image: '/assets/template/css/sprites/sprite_custom.png';
$expo-small: (76px, 59px, -76px, -59px, 22px, 16px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'expo-small', );
$expo-name: 'expo';
$expo-x: 76px;
$expo-y: 0px;
$expo-offset-x: -76px;
$expo-offset-y: 0px;
$expo-width: 80px;
$expo-height: 59px;
$expo-total-width: 156px;
$expo-total-height: 133px;
$expo-image: '/assets/template/css/sprites/sprite_custom.png';
$expo: (76px, 0px, -76px, 0px, 80px, 59px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'expo', );
$residential-complex-small-name: 'residential-complex-small';
$residential-complex-small-x: 116px;
$residential-complex-small-y: 77px;
$residential-complex-small-offset-x: -116px;
$residential-complex-small-offset-y: -77px;
$residential-complex-small-width: 22px;
$residential-complex-small-height: 22px;
$residential-complex-small-total-width: 156px;
$residential-complex-small-total-height: 133px;
$residential-complex-small-image: '/assets/template/css/sprites/sprite_custom.png';
$residential-complex-small: (116px, 77px, -116px, -77px, 22px, 22px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'residential-complex-small', );
$residential-complex-name: 'residential-complex';
$residential-complex-x: 0px;
$residential-complex-y: 0px;
$residential-complex-offset-x: 0px;
$residential-complex-offset-y: 0px;
$residential-complex-width: 76px;
$residential-complex-height: 77px;
$residential-complex-total-width: 156px;
$residential-complex-total-height: 133px;
$residential-complex-image: '/assets/template/css/sprites/sprite_custom.png';
$residential-complex: (0px, 0px, 0px, 0px, 76px, 77px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'residential-complex', );
$wood-house-small-name: 'wood-house-small';
$wood-house-small-x: 98px;
$wood-house-small-y: 59px;
$wood-house-small-offset-x: -98px;
$wood-house-small-offset-y: -59px;
$wood-house-small-width: 22px;
$wood-house-small-height: 15px;
$wood-house-small-total-width: 156px;
$wood-house-small-total-height: 133px;
$wood-house-small-image: '/assets/template/css/sprites/sprite_custom.png';
$wood-house-small: (98px, 59px, -98px, -59px, 22px, 15px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'wood-house-small', );
$wood-house-name: 'wood-house';
$wood-house-x: 0px;
$wood-house-y: 77px;
$wood-house-offset-x: 0px;
$wood-house-offset-y: -77px;
$wood-house-width: 80px;
$wood-house-height: 56px;
$wood-house-total-width: 156px;
$wood-house-total-height: 133px;
$wood-house-image: '/assets/template/css/sprites/sprite_custom.png';
$wood-house: (0px, 77px, 0px, -77px, 80px, 56px, 156px, 133px, '/assets/template/css/sprites/sprite_custom.png', 'wood-house', );
$spritesheet-width: 156px;
$spritesheet-height: 133px;
$spritesheet-image: '/assets/template/css/sprites/sprite_custom.png';
$spritesheet-sprites: ($arrow-gray-right, $arrow-gray, $expo-small, $expo, $residential-complex-small, $residential-complex, $wood-house-small, $wood-house, );
$spritesheet: (156px, 133px, '/assets/template/css/sprites/sprite_custom.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
